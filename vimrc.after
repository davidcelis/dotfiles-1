colorscheme Tomorrow-Night-Eighties
highlight ColorColumn ctermbg=233

set autoindent
set colorcolumn=80
set cursorline
set numberwidth=4
set scrolloff=3
set showcmd
set undodir=~/.vim/_temp
set undofile
set visualbell
set wildmenu
set wildmode=list:longest,full
set nowrap

nnoremap <leader>/ :nohlsearch<cr>
nnoremap <cr> :nohlsearch<cr><cr>

" :help tcsh-style
cnoremap <c-a> <home>
cnoremap <c-e> <end>
cnoremap <esc>b <s-left>
cnoremap <esc>f <s-right>
cnoremap <c-f> <right>
cnoremap <c-b> <left>

augroup myvimrc
  au!
  autocmd FileType mml nnoremap <leader>m :w<cr>:MmlMake<cr>
augroup END

" Ctrl-P
"
let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files --exclude-standard -co']

" Git Gutter
"
highlight LineNr     ctermbg=236
highlight SignColumn ctermbg=237

" Syntastic
"
let g:syntastic_ruby_checker = 'macruby'

" Vimux
"
if has('ruby')
  function! MyVimuxScrollDownInspect()
    ruby MyTmuxSession.new.inspect_scroll_down
  endfunction

  function! MyVimuxScrollUpInspect()
    ruby MyTmuxSession.new.inspect_scroll_up
  endfunction

  command! MyVimuxScrollDownInspect :call MyVimuxScrollDownInspect()
  command! MyVimuxScrollUpInspect :call MyVimuxScrollUpInspect()

  nnoremap <esc>k :MyVimuxScrollUpInspect<cr>
  nnoremap <esc>j :MyVimuxScrollDownInspect<cr>

  ruby <<RUBY
class MyTmuxSession < CurrentTmuxSession
  def initialize
    super
    @_session = true
  rescue => e
    raise unless e.message == 'You are not in a tmux session'
    @_session = false
  end

  def inspect_scroll_up
    if @_session && current_panes.size > 1
      super
    else
      window = VIM::Window.current
      row, col = window.cursor
      window.cursor = [row - 1, col]
    end
  end

  def inspect_scroll_down
    if @_session && current_panes.size > 1
      super
    else
      window = VIM::Window.current
      row, col = window.cursor
      window.cursor = [row + 1, col]
    end
  end
end
RUBY
endif

" Vroom
"
let g:vroom_use_bundle_exec = 0 " Rely on rbenv-bundler.
let g:vroom_use_vimux = 1
let g:vroom_spec_command = 'time  rspec  --drb '
let g:vroom_test_unit_command = 'time  testrbl '

" Zeus
"
function! Zeus()
  let g:vroom_spec_command = 'time  zeus  rspec '
  let g:vroom_test_unit_command = 'time  testrbl '
endfunction
command! Zeus :call Zeus()

if filewritable('.zeus.sock')
  Zeus
endif
